<!DOCTYPE html>
<html>
<head>
	<title>Page Title</title>
</head>
<body>
	<canvas id="canvasForTheGame"></canvas>
<script>
	var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	window.requestAnimationFrame = requestAnimationFrame;
	
	// Delaring the variables
	var canvas = document.getElementById("canvasForTheGame");
	// Setting the dimensions of the window
	var width = 1000;
	var height = 400;
	var ctx = canvas.getContext("2d");
	// Setting variable values for the player
	var player = {
		x: width / 4,
		y: height - 200,
		width: 40,
		height: 40,
		velX: 0,
		velY: 0
	};
	
	// Declaring keys to use inputs later on
	var keys = [];
	
	var friction = 0.8;
	
	// Setting the dimensions of the canvas
	canvas.width = width;
	canvas.height = height;

	var startTimeMS = 0;
    var frameX = 0;
    var frameXMax = 6;
    var frameY = 0;
    var frameYMax = 3;
    var frame = 0;
    var frameMax = 26;
    var frameTimer = 0.05;
    var frameTimeMax = 0.017;	
    var spriteWidth = 74;
    var spriteHeight = 86;
	
	// Setting the variables for images and allowing for images to be assigned
    var img = new Image();
	
	// Setting a boolean to detect of a key is pressed
	var isKeyPressed = false;
	
	var imgPavement = new Image();
	// Using arrays to store objects used in the scene
	var pavements = [];
	
	var imgBackGround = new Image();
	var backgroundImage = [];
	
	var imgObstacles = new Image();
	var obstacles = [];
	
	var imgDumpTruck = new Image();
	var dumpTruck = [];
	
	var imgFence = new Image();
	var fence = [];
	
	var imgOilSpill = new Image();
	var oilSpill = [];
	
	var imgPage = new Image();
	var page = [];
	
	// Setting dimensions for the collectables in game
	var pageWidth = 30;
	var pageHeight = 30;
	
	// Setting positions for the buttons used in the menu
	var buttonX = [100,295];
	var buttonY = [250,245];
	
	// Setting the position for the buttons
	var buttonWidth = [44,54];
	var buttonHeight = [44,54];
	
	// Creating variables for the mouse position
	var mouseX;
	var mouseY;
	
	// Creating varibales for the button images that will be assigned later
	var playImage = new Image();
	var quit = new Image();
	
	// Creating variable to store which button is pressed
	var buttonClicked = 0;
	
	// Creating and setting initial values for the game
	var score = 0;
	var health = 100;
	
	// Creating and setting initial value for the player's time
	var playerTime = 0;
	
	// Creating an offset based on the current time to create a timer later on
	var offset = Date.now();
	
	// Creating and setting variables for the time that will be displayed 
	var seconds = 0;
	var minutes = 0;
	
	// Creating and setting a variable that will be used in a calculation
	var secondsInMinutes = 60;
	
	// Creating a boolean that will be used to tell if the game is over
	var game_over = false;
	
	// Creating a boolean that will be used to tell if the final page was collected
	var lastPageDeleted = false;
	
	// Creating variables for the music and sound effects used in game
	var _sound;
	var _music;
	
	// Loads the init() and showMenu() function when the game is opened
	window.addEventListener("load", function () {
		
		init();
		showMenu();
		
	});
	
	function startGame(){
		
		// Clears the canvas when startGame() is called
		ctx.clearRect(0, 0, canvas.width, canvas.height);
	
		// Writing text that will display information to the player in game
		ctx.font = "20px Calibri";
		ctx.fillStyle = "green";
		ctx.textAlign = "center";
		ctx.fillText("Health: "+ health, 650, 20);
		
		ctx.font = "20px Calibri";
		ctx.fillStyle = "red";
		ctx.textAlign = "center";
		ctx.fillText("Score: 0", 900, 20);
		
		ctx.font = "20px Impact";
		ctx.fillStyle = "black";
		ctx.textAlign = "center";
		ctx.fillText("Running Late", 55, 20);
		
		// Loading images to the correct new variable
		img.src = 'braidSpriteSheet2.png';
		imgPavement.src = 'pavement.jpg';
		imgObstacles.src = 'crate.png';
		imgDumpTruck.src = 'truck.png';
		imgFence.src = 'fence.png';
		imgOilSpill.src = 'oilspill.png';
		imgPage.src = 'page.png';
		imgBackGround.src = 'background.png';
		
		// Loading sounds to the correct new variable
		_music = new gameSound("themesong.mp3");
		_sound = new gameSound("pickup.mp3");
		
		// Plays the game music
		_music.play();
		
		
		// Creating the objects used in the scene: pavements, crates, fences, truck, oil spills and the collectables
		pavements.push({
			// Sets the positions
			x: 0,
			y: 30,
			// Sets the dimensions of the object
			width: 1000,
			height: 40
		});
		
		pavements.push({
			x: 0,
			y: 360,
			width: 1000,
			height: 40
		});
		
		backgroundImage.push({
			x: 0,
			y: 30,
			width: 1000,
			height: 370
		});
		
		obstacles.push ({
			x: 100,
			y: 130,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 100,
			y: 165,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 100,
			y: 200,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 150,
			y: 330,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 150,
			y: 295,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 380,
			y: 70,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 380,
			y: 105,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 315,
			y: 330,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 460,
			y: 200,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 460,
			y: 235,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 460,
			y: 270,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 640,
			y: 70,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 640,
			y: 105,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 640,
			y: 140,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 750,
			y: 200,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 750,
			y: 235,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 750,
			y: 270,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 900,
			y: 70,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 935,
			y: 70,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 935,
			y: 105,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 900,
			y: 330,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 900,
			y: 295,
			width: 30,
			height: 30
		});
		
		obstacles.push ({
			x: 935,
			y: 295,
			width: 30,
			height: 30
		});
		
		dumpTruck.push ({
			x: 290,
			y: 150,
			width: 110,
			height: 65
		});
		
		fence.push ({
			x: 200,
			y: 150,
			width: 20,
			height: 60
		});
		
		fence.push ({
			x: 200,
			y: 90,
			width: 20,
			height: 60
		});
		
		fence.push ({
			x: 320,
			y: 270,
			width: 20,
			height: 60
		});
		
		fence.push ({
			x: 500,
			y: 70,
			width: 20,
			height: 60
		});
		
		fence.push ({
			x: 580,
			y: 300,
			width: 20,
			height: 60
		});
		
		fence.push ({
			x: 580,
			y: 235,
			width: 20,
			height: 60
		});
		
		fence.push ({
			x: 755,
			y: 70,
			width: 20,
			height: 60
		});
		
		fence.push ({
			x: 840,
			y: 70,
			width: 20,
			height: 60
		});
		
		fence.push ({
			x: 840,
			y: 135,
			width: 20,
			height: 60
		});
		
		fence.push ({
			x: 870,
			y: 300,
			width: 20,
			height: 60
		});
		
		oilSpill.push ({
			x: 200,
			y: 305,
			width: 100,
			height: 50
		});
		
		oilSpill.push ({
			x: 530,
			y: 75,
			width: 100,
			height: 50
		});
		
		oilSpill.push ({
			x: 670,
			y: 310,
			width: 75,
			height: 40
		});
		
		oilSpill.push ({
			x: 875,
			y: 150,
			width: 100,
			height: 50
		});
		
		//5
		page.push ({
			x: 940,
			y: 230,
			width: 20,
			height: 20
		});
		
		//4
		page.push ({
			x: 760,
			y: 320,
			width: 20,
			height: 20
		});
		
		//3
		page.push ({
			x: 800,
			y: 85,
			width: 20,
			height: 20
		});
		
		//2
		page.push ({
			x: 450,
			y: 85,
			width: 20,
			height: 20
		});
		
		//1
		page.push ({
			x: 70,
			y: 320,
			width: 20,
			height: 20
		});
		
		// Calls Update()
		update();
		
	}
	
	function init(){
		canvas.width = width;
		canvas.height = height;
		
		buttonClicked = 0;
	}

	function update() 
	{
		
		// Calls displayTime() every second
		setInterval(displayTime(), 1000);
	
		// If the player's health reaches 0
		if(health <= 0)
		{
			
			// Stops the music
			_music.stop();
			// Changes boolean value
			lastPageDeleted == true;
			// Calls gameOver()
			gameOver();
	
		}
		// If the last page has been collected
		if(lastPageDeleted == true)
		{
			
			// Stops the music
			_music.stop();
			
			// Allows the player to use the keys to restart or quit game
			// Press enter to go back to menu
			if(keys[13])
			{
			
				location.reload();
		
			}
			// Press escape to quit game
			if(keys[27])
			{
		
				quitGame();
		
			}
	
		}
		if(health > 0 && lastPageDeleted == false)
		{
			// Keeps the timer going
			// If the game is still on going
			increaseTime();
	
		}
	
		// Creates and sets the angle variable to 0
		var angle = 0;
		
		// If the game is still going
		if(lastPageDeleted == false)
		{
			// Allows the player to use the arrow keys to move around the game scene
			if (keys[40]) 
			{
				// top arrow
				if(player.y<(canvas.height-player.height-20))
				{
					player.velY++;
				}
				
			}
			if (keys[38]) {
				// right arrow
				if(player.y>40)
					player.velY--;
			}
			if (keys[39]) {
				// right arrow
				if(player.x<(canvas.width-player.width-20))
					player.velX++;
			}
			if (keys[37]) {
				// left arrow
				if(player.x>player.width)
					player.velX--;
			}
		
		}



		player.velX *= friction;
		player.velY *= friction;
		player.x += player.velX;
		player.y += player.velY;

		// Creates the player character in game
		ctx.clearRect(0,20, width, height);
		ctx.fillStyle = "black";
		ctx.beginPath();
		ctx.fill();
		ctx.fillStyle = "white";
		// Based of the positions and scale set here
		ctx.fillRect(player.x, player.y, player.width, player.height);
		
		// Creates the background for the game
		for (var i = 0; i < backgroundImage.length; i++) {
			// show the pavements on canvas
			ctx.rect(backgroundImage[i].x, backgroundImage[i].y, backgroundImage[i].width, backgroundImage[i].height);
			ctx.drawImage(imgBackGround, backgroundImage[i].x, backgroundImage[i].y, backgroundImage[i].width, backgroundImage[i].height);
		}
	
		// Calls requestAnimationFrame method
		requestAnimationFrame(update);
		
		// When a key is pressed the animation will be played
		if(isKeyPressed){
			animationFrame();
			ctx.drawImage(img, spriteWidth*frameX, spriteHeight*frameY, spriteWidth, spriteHeight, player.x, player.y, player.width, player.height);
		} else
			ctx.drawImage(img, spriteWidth*2, spriteHeight*1, spriteWidth, spriteHeight, player.x, player.y, player.width, player.height);

		
		// Goes through each of the items in the array
		for (var i = 0; i < pavements.length; i++) {
			// show the pavements on canvas
			ctx.rect(pavements[i].x, pavements[i].y, pavements[i].width, pavements[i].height);
			ctx.drawImage(imgPavement, pavements[i].x, pavements[i].y, pavements[i].width, pavements[i].height);
			// check if collide with players
			var dir = colCheck(player, pavements[i]);
			
			// If player collides then stops the player's velocity
			if (dir === "l" || dir === "r") {
				player.velX = 0;
			} else if(dir === "t" || dir === "b"){
				player.velY = 0;
			}
		}
		
		// Goes through each of the items in the array
		for (var i = 0; i < obstacles.length; i++) {
			// show the obstacles on canvas
			ctx.rect(obstacles[i].x, obstacles[i].y, obstacles[i].width, obstacles[i].height);
			ctx.drawImage(imgObstacles, obstacles[i].x, obstacles[i].y, obstacles[i].width, obstacles[i].height);
			// check if collide with players
			var dir = colCheck(player, obstacles[i]);
			
			// If player collides then stops the player's velocity
			if (dir === "l" || dir === "r") {
				player.velX = 0;
				
			} else if(dir === "t" || dir === "b"){
				player.velY = 0;
				
			}
		}
		
		// Goes through each of the items in the array
		for (var i = 0; i < dumpTruck.length; i++) {
			// show the truck on canvas
			ctx.rect(dumpTruck[i].x, dumpTruck[i].y, dumpTruck[i].width, dumpTruck[i].height);
			ctx.drawImage(imgDumpTruck, dumpTruck[i].x, dumpTruck[i].y, dumpTruck[i].width, dumpTruck[i].height);
			// check if collide with players
			var dir = colCheck(player, dumpTruck[i]);
			
			// If player collides then stops the player's velocity
			if (dir === "l" || dir === "r") {
				player.velX = 0;
			} else if(dir === "t" || dir === "b"){
				player.velY = 0;
			}
		}
		
		// Goes through each of the items in the array
		for (var i = 0; i < fence.length; i++) {
			// show the fence on canvas
			ctx.rect(fence[i].x, fence[i].y, fence[i].width, fence[i].height);
			ctx.drawImage(imgFence, fence[i].x, fence[i].y, fence[i].width, fence[i].height);
			// check if collide with players
			var dir = colCheck(player, fence[i]);
			
			// If player collides then stops the player's velocity
			if (dir === "l" || dir === "r") {
				player.velX = 0;
			} else if(dir === "t" || dir === "b"){
				player.velY = 0;
			}
		}
		
		// Goes through each of the items in the array
		for (var i = 0; i < oilSpill.length; i++) {
			// show the fence on canvas
			ctx.rect(oilSpill[i].x, oilSpill[i].y, oilSpill[i].width, oilSpill[i].height);
			ctx.drawImage(imgOilSpill, oilSpill[i].x, oilSpill[i].y, oilSpill[i].width, oilSpill[i].height);
			// check if collide with players
			var dir = colCheck(player, oilSpill[i]);
			
			// If player collides then stops the player's velocity
			if (dir === "l" || dir === "r") {
				player.velX = 0;
				// Also takes away 10 health if the player still has health left
				if(health >= 10){
					health = health - 10;
				}
				// Then updates the health total
				displayHealth();
			} else if(dir === "t" || dir === "b"){
				player.velY = 0;
				if(health >= 10){
					health = health - 10;
				}
				displayHealth();
			}
		}
		
		// Goes through each of the items in the array
		for (var i = 0; i < page.length; i++) {
			// show the fence on canvas
			ctx.rect(page[i].x, page[i].y, page[i].width, page[i].height);
			ctx.drawImage(imgPage, page[i].x, page[i].y, page[i].width, page[i].height);
			// check if collide with players
			var dir = colCheck(player, page[i]);
			
			if (dir === "l" || dir === "r") {
			
				// If the page collected is the final page
				if(page[i] == page[0])
				{
					
					// Adds to the player's score
					score += 1;
					// Plays sound effect
					_sound.play();
					// Deletes the page
					delete(page[0]);
					// Calls gameOver()
					gameOver();
					// Sets variable to true
					lastPageDeleted = true;
				
				}
				else
				{
					// If it isn't the final page
					// Deletes the page
					delete(page[i]);
					// Plays sound effect
					_sound.play();
					// Adds to the player's score
					score += 1;
					// Updates the player's score
					displayScore();
					
				}
				
			} else if(dir === "t" || dir === "b"){
				// Same as previous segment
				if(page[i] == page[0])
				{
				
					_sound.play();
					score += 1;
					delete(page[0]);
					gameOver();
					lastPageDeleted = true;
				
				}
				else
				{
				
					delete(page[i]);
					_sound.play();
					score += 1;
					displayScore();

				}
				
			}
				
			
		}
	
	}
	
	function displayTime()
	{
		
		// Clears the area where the time is displayed
		ctx.clearRect(280, 0, 320, 30);
		ctx.font = "20px Calibri";
		ctx.fillStyle = "blue";
		ctx.textAlign = "center";
		// Writes out the player's time based on the x, y positions stated here
		ctx.fillText("Time: "+minutes+" : "+seconds.toFixed(0), 400, 20);
		
	}
	
	function increaseTime()
	{
			// If the seconds variable is greater than 59
			if(seconds > 59)
			{
				
				// Player time is set back to 100
				playerTime = 100;
				// Player time keeps counting 
				playerTime = playerTime + 1;
				// Player time is divided by 100 to get the number of seconds
				seconds = playerTime / 100;
				// 1 is added to the minutes variable
				minutes = minutes + 1;
		
			}
			else
			{
				// Other wise keep player time counting
				playerTime = playerTime + 1;
				seconds = playerTime / 100;
		
			}
		
		
		
	}
	
	document.body.addEventListener("keydown", function (e) {
		keys[e.keyCode] = true;
	});

	document.body.addEventListener("keyup", function (e) {
		keys[e.keyCode] = false;
	});
	
	document.body.addEventListener("keydown", function (e) {
		keys[e.keyCode] = true;
		isKeyPressed = true;
	});
	
	document.body.addEventListener("keyup", function (e) {
		keys[e.keyCode] = false;
		isKeyPressed = false;
	});

	
	function displayScore()
	{
		
		// Clears the area where the score is displayed
		ctx.clearRect(920, 0, 940, 30);
		ctx.font = "20px Calibri";
		ctx.fillStyle = "red";
		ctx.textAlign = "center";
		// Writes the score value at the x, y positions stated here
		ctx.fillText(score, 925, 20);
		
	}
	
	function displayHealth()
	{
		
		// Clears the area where the health is displayed
		ctx.clearRect(665, 0, 100, 30);
		ctx.font = "20px Calibri";
		ctx.fillStyle = "green";
		ctx.textAlign = "center";
		// Writes the health value at the x, y positions stated here
		ctx.fillText(health, 680, 20);
		
	}
	
	function gameOver()
	{
		
		// Sets game over to true
		game_over = true;
		
		// Clears the canvas
		ctx.clearRect(0, 0, width, height)
		
		// Writes out the "game over" with the score and the time
		ctx.font = "20px Impact";
		ctx.fillStyle = "black";
		ctx.textAlign = "center";
		ctx.fillText("Game Over", 55, 20);
		
		ctx.font = "20px Impact";
		ctx.fillStyle = "red";
		ctx.textAlign = "center";
		ctx.fillText("Final Score: "+score, 200, 20);
		
		ctx.font = "20px Impact";
		ctx.fillStyle = "blue";
		ctx.textAlign = "center";
		ctx.fillText("Time: "+minutes+" : "+seconds.toFixed(0), 350, 20);
		
		
		// Allows the player to use keys to navigate back to the menu or to quit the game
		// Press enter to go back to menu
		if(keys[13])
		{
			
			location.reload();
		
		}
		// Press escape to quit game
		if(keys[27])
		{
		
			quitGame();
		
		}
	
	}
	
	function gameSound(src)
	{
		
		// Creating and setting up the variables needed to use sound in the game
		this.sound = document.createElement("audio");
		// Allows for the sound source to be assigned
		this.sound.src = src;
		this.sound.setAttribute("preload", "auto");
		this.sound.setAttribute("controls", "none");
		this.sound.style.display = "none";
		document.body.appendChild(this.sound);
		
		// Creates the play function to be able to play the music when called
		this.play = function()
		{
		
			this.sound.play();
		
		}
		
		// Creates the play function to be able to play the sound effects when called
		this.stop = function()
		{
		
			this.sound.pause();
		
		}
	
	}


	function animationFrame(){
		var elapsed = (Date.now() - startTimeMS)/1000;
		startTimeMS = Date.now();

		//only update frames when timer is below 0
		frameTimer = frameTimer - elapsed;
		if(frameTimer <= 0)
		{
			frameTimer = frameTimeMax;
			frameX++;
			if(frameX>frameXMax)
			{
			  frameX = 0;
			  frameY++;
			  //end of row, move down to next row in sheet
			  if(frameY>frameYMax)
			  {
				  frameY = 0;
			  }
			}
			frame++;
			//reset frames to 0 in event that there are empty spaces on sprite sheet
			if(frame > frameMax)
			{
			  frame = 0;
			  frameX = 0;
			  frameY = 0;
			}
			
		}
		
	
	}
	
	function colCheck(shapeA, shapeB) {
		// get the vectors to check against
		var vX = (shapeA.x + (shapeA.width / 2)) - (shapeB.x + (shapeB.width / 2)),
			vY = (shapeA.y + (shapeA.height / 2)) - (shapeB.y + (shapeB.height / 2)),
			// add the half widths and half heights of the objects
			hWidths = (shapeA.width / 2) + (shapeB.width / 2),
			hHeights = (shapeA.height / 2) + (shapeB.height / 2),
			colDir = null;

		// if the x and y vector are less than the half width or half height, they we must be inside the object, causing a collision
		if (Math.abs(vX) < hWidths && Math.abs(vY) < hHeights) {
			// figures out on which side we are colliding (top, bottom, left, or right)
			var oX = hWidths - Math.abs(vX),
				oY = hHeights - Math.abs(vY);
			if (oX >= oY) {
				if (vY > 0) {
					colDir = "t";
					shapeA.y += oY;
				} else {
					colDir = "b";
					shapeA.y -= oY;
				}
			} else {
				if (vX > 0) {
					colDir = "l";
					shapeA.x += oX;
				} else {
					colDir = "r";
					shapeA.x -= oX;
				}
			}
		}
		return colDir;
	}
	
	function showMenu(){
		
		// Writes out the text need for the menu: the title, controls, objectives, warnings and directions
		ctx.font = "40px Impact";
		ctx.fillStyle = "black";
		ctx.textAlign = "center";
		ctx.fillText("Running Late", 220, 40);
		
		ctx.font = "20px Impact";
		ctx.fillStyle = "blue";
		ctx.textAlign = "center";
		ctx.fillText("Use the Arrow Keys to Move", 220, 100);
		
		ctx.font = "20px Impact";
		ctx.fillStyle = "blue";
		ctx.textAlign = "center";
		ctx.fillText("Collect All of the Pages Before They Fly Away", 220, 150);
		
		ctx.font = "20px Impact";
		ctx.fillStyle = "blue";
		ctx.textAlign = "center";
		ctx.fillText("Beware of the Dangerous Construction Site", 220, 200);
		
		ctx.font = "25px Impact";
		ctx.fillStyle = "green";
		ctx.textAlign = "center";
		ctx.fillText("PLAY", 122, 325);
		
		ctx.font = "25px Impact";
		ctx.fillStyle = "RED";
		ctx.textAlign = "center";
		ctx.fillText("QUIT", 322, 325);
		
		// Sets the playImage source to this image file
		playImage.src = "playbutton.png";
		// Creates the button using the image, positions and the dimensions
		playImage.addEventListener('load', e => {
			ctx.drawImage(playImage, buttonX[0], buttonY[0], buttonWidth[0], buttonHeight[0]);
		});
		// Sets the quit source to this image file
		quit.src = "quitbutton.png";
		// Creates the button using the image, positions and the dimensions
		quit.addEventListener('load', e => {
			ctx.drawImage(quit, buttonX[1], buttonY[1], buttonWidth[1], buttonHeight[1]);
		});
		
		canvas.addEventListener("mousemove", checkPos);
		canvas.addEventListener("mouseup", checkClick);
	}
	
	function checkPos(event){
		// Sets the coords variable to the mouse position
		coords = canvas.relMouseCoords(event);
		// Sets the mouseX and mouseY variables to the mouse's x, y positions
		mouseX = coords.x;
		mouseY = coords.y
	}
	
	HTMLCanvasElement.prototype.relMouseCoords = function (event) {
			var totalOffsetX = 0;
			var totalOffsetY = 0;
			var canvasX = 0;
			var canvasY = 0;
			var currentElement = this;
			
			do {
				totalOffsetX += currentElement.offsetLeft;
				totalOffsetY += currentElement.offsetTop;
			}
			while (currentElement = currentElement.offsetParent)
			
			canvasX = event.pageX - totalOffsetX;
			canvasY = event.pageY - totalOffsetY;
			
			canvasX = Math.round(canvasX *(this.width / this.offsetWidth));
			canvasY = Math.round(canvasY *(this.height / this.offsetHeight));
			
			return {x:canvasX, y:canvasY}
		}
	
	function checkClick(mouseEvent){
		// If the play button is clicked then the startGame method will be called
		if(mouseX > buttonX[0] && mouseX < (buttonX[0] + buttonWidth[0])){
			if (mouseY > buttonY[0] && mouseY < (buttonY[0] + buttonHeight[0])) {
				buttonClicked = 1;
				startGame();
			}
		}
		// If the quit button is clicked then the quitGame method will be called
		if(mouseX > buttonX[1] && mouseX < (buttonX[1] + buttonWidth[1])){
			if (mouseY > buttonY[1] && mouseY < (buttonY[1] + buttonHeight[1])) {
				buttonClicked = 2;
				quitGame();
			}
		}
		
		if (buttonClicked > 0){
			canvas.removeEventListener("mousemove", checkPos);
			canvas.removeEventListener("mouseup", checkClick);
		}
	}
	
	function quitGame(){
		window.close();
	}

	
	



</script>
</body>
</html>

