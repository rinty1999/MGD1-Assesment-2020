<!DOCTYPE html>
<html>
<head>
	<title>Page Title</title>
</head>
<body>
	<canvas id="canvasForTheGame"></canvas>
<script>
	var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;
	window.requestAnimationFrame = requestAnimationFrame;
		
	var canvas = document.getElementById("canvasForTheGame");
	var width = 1000;
	var height = 400;
	var ctx = canvas.getContext("2d");
	var player = {
		x: width / 4,
		y: height - 200,
		width: 40,
		height: 40,
		velX: 0,
		velY: 0
	};
	var keys = [];
	var friction = 0.8;

	canvas.width = width;
	canvas.height = height;

	var startTimeMS = 0;
    var frameX = 0;
    var frameXMax = 6;
    var frameY = 0;
    var frameYMax = 3;
    var frame = 0;
    var frameMax = 26;
    var frameTimer = 0.05;
    var frameTimeMax = 0.017;	
    var spriteWidth = 74;
    var spriteHeight = 86;
    var img = new Image();
	
	var isKeyPressed = false;
	
	var imgCrate = new Image();
	var boxes = [];
	
	var buttonX = [33,100];
	var buttonY = [71,71];
	var buttonWidth = [44,44];
	var buttonHeight = [44,44];
	
	var mouseX;
	var mouseY;
	var playImage = new Image();
	var quit = new Image();
	
	var buttonClicked = 0;
	
	window.addEventListener("load", function () {
		
		init();
		showMenu();
		
	});
	
	function startGame(){
		//canvas.width = width;
		//canvas.height = height;

		ctx.font = "20px Impact";
		ctx.fillStyle = "green";
		ctx.textAlign = "center";
		ctx.fillText("Health:", 30, 20);
		
		ctx.font = "20px Impact";
		ctx.fillStyle = "red";
		ctx.textAlign = "center";
		ctx.fillText("Score:", 200, 20);
		
		img.src = 'braidSpriteSheet.png';
		
		img.src = 'braidSpriteSheet.png'
		imgCrate.src = 'RTS_Crate_0.png';

		boxes.push({
			x: 120,
			y: 120,
			width: 20,
			height: 20
		});
		boxes.push({
			x: 140,
			y: 120,
			width: 20,
			height: 20
		});
		
		update();
		
	}
	
	function init(){
		canvas.width = width;
		canvas.height = height;
		
		buttonClicked = 0;
	}

	function update() {
	if (keys[40]) {
			// top arrow
			if(player.y<(canvas.height-player.height-20))
				player.velY++;
		}
		if (keys[38]) {
			// right arrow
			if(player.y>40)
				player.velY--;
		}
		if (keys[39]) {
			// right arrow
			if(player.x<(canvas.width-player.width-20))
				player.velX++;
		}
		if (keys[37]) {
			// left arrow
			if(player.x>player.width)
				player.velX--;
		}

		player.velX *= friction;
		player.velY *= friction;
		player.x += player.velX;
		player.y += player.velY;

		ctx.clearRect(0,20, width, height);
		//ctx.drawImage(img, spriteWidth*frameX, spriteHeight*frameY, spriteWidth, spriteHeight, player.x, player.y, player.width, player.height);
		ctx.fillStyle = "black";
		ctx.beginPath();
		ctx.fill();
		ctx.fillStyle = "white";
		ctx.fillRect(player.x, player.y, player.width, player.height);

		requestAnimationFrame(update);
		
		if(isKeyPressed){
			animationFrame();
			ctx.drawImage(img, spriteWidth*frameX, spriteHeight*frameY, spriteWidth, spriteHeight, player.x, player.y, player.width, player.height);
		} else
			ctx.drawImage(img, spriteWidth*2, spriteHeight*1, spriteWidth, spriteHeight, player.x, player.y, player.width, player.height);

		
		for (var i = 0; i < boxes.length; i++) {
			// show the boxes on canvas
			ctx.rect(boxes[i].x, boxes[i].y, boxes[i].width, boxes[i].height);
			ctx.drawImage(imgCrate, boxes[i].x, boxes[i].y, boxes[i].width, boxes[i].height);
			// check if collide with players
			var dir = colCheck(player, boxes[i]);

			if (dir === "l" || dir === "r") {
				player.velX = 0;
			} else if(dir === "t" || dir === "b"){
				player.velY = 0;
			}
		}


	}
	
	document.body.addEventListener("keydown", function (e) {
		keys[e.keyCode] = true;
	});

	document.body.addEventListener("keyup", function (e) {
		keys[e.keyCode] = false;
	});
	
	document.body.addEventListener("keydown", function (e) {
		keys[e.keyCode] = true;
		isKeyPressed = true;
	});
	
	document.body.addEventListener("keyup", function (e) {
		keys[e.keyCode] = false;
		isKeyPressed = false;
	});



	function animationFrame(){
		var elapsed = (Date.now() - startTimeMS)/1000;
		startTimeMS = Date.now();

		//only update frames when timer is below 0
		frameTimer = frameTimer - elapsed;
		if(frameTimer <= 0)
		{
			frameTimer = frameTimeMax;
			frameX++;
			if(frameX>frameXMax)
			{
			  frameX = 0;
			  frameY++;
			  //end of row, move down to next row in sheet
			  if(frameY>frameYMax)
			  {
				  frameY = 0;
			  }
			}
			frame++;
			//reset frames to 0 in event that there are empty spaces on sprite sheet
			if(frame > frameMax)
			{
			  frame = 0;
			  frameX = 0;
			  frameY = 0;
			}
			
		}
		
	
	}
	
	function colCheck(shapeA, shapeB) {
		// get the vectors to check against
		var vX = (shapeA.x + (shapeA.width / 2)) - (shapeB.x + (shapeB.width / 2)),
			vY = (shapeA.y + (shapeA.height / 2)) - (shapeB.y + (shapeB.height / 2)),
			// add the half widths and half heights of the objects
			hWidths = (shapeA.width / 2) + (shapeB.width / 2),
			hHeights = (shapeA.height / 2) + (shapeB.height / 2),
			colDir = null;

		// if the x and y vector are less than the half width or half height, they we must be inside the object, causing a collision
		if (Math.abs(vX) < hWidths && Math.abs(vY) < hHeights) {
			// figures out on which side we are colliding (top, bottom, left, or right)
			var oX = hWidths - Math.abs(vX),
				oY = hHeights - Math.abs(vY);
			if (oX >= oY) {
				if (vY > 0) {
					colDir = "t";
					shapeA.y += oY;
				} else {
					colDir = "b";
					shapeA.y -= oY;
				}
			} else {
				if (vX > 0) {
					colDir = "l";
					shapeA.x += oX;
				} else {
					colDir = "r";
					shapeA.x -= oX;
				}
			}
		}
		return colDir;
	}
	
	function showMenu(){
		playImage.src = "playbutton.png";
		playImage.addEventListener('load', e => {
			ctx.drawImage(playImage, buttonX[0], buttonY[0], buttonWidth[0], buttonHeight[0]);
		});
		
		quit.src = "quitbutton.png";
		quit.addEventListener('load', e => {
			ctx.drawImage(quit, buttonX[1], buttonY[1], buttonWidth[1], buttonHeight[1]);
		});
		
		canvas.addEventListener("mousemove", checkPos);
		canvas.addEventListener("mouseup", checkClick);
	}
	
	function checkPos(event){
		coords = canvas.relMouseCoords(event);
		mouseX = coords.x;
		mouseY = coords.y
	}
	
	HTMLCanvasElement.prototype.relMouseCoords = function (event) {
			var totalOffsetX = 0;
			var totalOffsetY = 0;
			var canvasX = 0;
			var canvasY = 0;
			var currentElement = this;
			
			do {
				totalOffsetX += currentElement.offsetLeft;
				totalOffsetY += currentElement.offsetTop;
			}
			while (currentElement = currentElement.offsetParent)
			
			canvasX = event.pageX - totalOffsetX;
			canvasY = event.pageY - totalOffsetY;
			
			canvasX = Math.round(canvasX *(this.width / this.offsetWidth));
			canvasY = Math.round(canvasY *(this.height / this.offsetHeight));
			
			return {x:canvasX, y:canvasY}
		}
	
	function checkClick(mouseEvent){
		if(mouseX > buttonX[0] && mouseX < (buttonX[0] + buttonWidth[0]));{
			if (mouseY > buttonY[0] && mouseY < (buttonY[0] + buttonHeight[0])) {
				buttonClicked = 1;
				startGame();
			}
		}
		if(mouseX > buttonX[1] && mouseX < (buttonX[1] + buttonWidth[1]));{
			if (mouseY > buttonY[1] && mouseY < (buttonY[1] + buttonHeight[1])) {
				buttonClicked = 2;
				//quitGame();
			}
		}
		if (buttonClicked > 0){
			canvas.removeEventListener("mousemove", checkPos);
			canvas.removeEventListener("mouseup", checkClick);
		}
	}

	
	



</script>
</body>
</html>
